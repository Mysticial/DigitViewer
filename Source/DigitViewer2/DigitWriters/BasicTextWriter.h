/* BasicTextWriter.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 02/03/2018
 * Last Modified    : 02/03/2018
 * 
 */

#pragma once
#ifndef ydv_DigitViewer_BasicTextWriter_H
#define ydv_DigitViewer_BasicTextWriter_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <memory>
#include <mutex>
#include "PublicLibs/SystemLibs/FileIO/BasicFile.h"
#include "BasicDigitWriter.h"
namespace DigitViewer2{
    using namespace ymp;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class BasicTextWriter : public BasicDigitWriter{
public:
    BasicTextWriter(
        const std::string& path,    //  UTF-8
        const std::string& first_digits,
        char radix
    );

    virtual upL_t recommend_buffer_size(uiL_t digits, upL_t limit) const override;
    virtual std::unique_ptr<BasicDigitReader> close_and_get_basic_reader() override;

    virtual void store_digits(
        const char* input,
        uiL_t offset, upL_t digits,
        void* P, upL_t Pbytes,
        BasicParallelizer& parallelizer, upL_t tds
    ) override;


private:
    using ConvertFunction = bool (*)(char* dec, const char* raw, upL_t digits);

    std::mutex m_lock;
    FileIO::BasicFile m_file;

    ConvertFunction m_fp_convert;

    ufL_t m_dp_offset;      //  Offset in the file of the first digit after the decimal place.
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
