/* u64h16_inverse_intrinsics_Default.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/19/2011
 * Last Modified    : 01/23/2016
 * 
 */

#ifndef ydv_u64h16_inverse_intrinsics_Default_H
#define ydv_u64h16_inverse_intrinsics_Default_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
namespace DigitViewer{
namespace u64h16{
    using namespace ymp;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_FORCE_INLINE void convert_h16x1_inverse_Default(const char str[16], u64_t hex[1]){
    register u64_t r0, r1, r2, r3;

    r0 = ((const u64_t*)str)[0];
    r1 = ((const u64_t*)str)[1];

    r2 = r0 & 0x000f000f000f000full;
    r3 = r1 & 0x000f000f000f000full;
    r0 >>= 8;
    r1 >>= 8;
    r0 &= 0x000f000f000f000full;
    r1 &= 0x000f000f000f000full;
    r2 <<= 4;
    r3 <<= 4;
    r0 |= r2;
    r1 |= r3;

    r2 = r0 & 0x000000ff000000ffull;
    r3 = r1 & 0x000000ff000000ffull;
    r0 >>= 16;
    r1 >>= 16;
    r0 &= 0x000000ff000000ffull;
    r1 &= 0x000000ff000000ffull;
    r2 <<= 8;
    r3 <<= 8;
    r0 |= r2;
    r1 |= r3;

    r2 = r0 & 0x000000000000ffffull;
    r3 = r1 & 0x000000000000ffffull;
    r0 >>= 32;
    r1 >>= 32;
    r0 &= 0x000000000000ffffull;
    r1 &= 0x000000000000ffffull;
    r2 <<= 16;
    r3 <<= 16;
    r0 |= r2;
    r1 |= r3;

    r0 <<= 32;
    r0 |= r1;

    hex[0] = r0;
}
YM_FORCE_INLINE void convert_h16x2_inverse_Default(const char str[16*2], u64_t hex[2]){
    register u64_t r0, r1, r2, r3;
    register u64_t s0, s1, s2, s3;

    r0 = ((const u64_t*)str)[0];
    r1 = ((const u64_t*)str)[1];
    s0 = ((const u64_t*)str)[2];
    s1 = ((const u64_t*)str)[3];

    r2 = r0 & 0x000f000f000f000full;
    r3 = r1 & 0x000f000f000f000full;
    s2 = s0 & 0x000f000f000f000full;
    s3 = s1 & 0x000f000f000f000full;
    r0 >>= 8;
    r1 >>= 8;
    s0 >>= 8;
    s1 >>= 8;
    r0 &= 0x000f000f000f000full;
    r1 &= 0x000f000f000f000full;
    s0 &= 0x000f000f000f000full;
    s1 &= 0x000f000f000f000full;
    r2 <<= 4;
    r3 <<= 4;
    s2 <<= 4;
    s3 <<= 4;
    r0 |= r2;
    r1 |= r3;
    s0 |= s2;
    s1 |= s3;

    r2 = r0 & 0x000000ff000000ffull;
    r3 = r1 & 0x000000ff000000ffull;
    s2 = s0 & 0x000000ff000000ffull;
    s3 = s1 & 0x000000ff000000ffull;
    r0 >>= 16;
    r1 >>= 16;
    s0 >>= 16;
    s1 >>= 16;
    r0 &= 0x000000ff000000ffull;
    r1 &= 0x000000ff000000ffull;
    s0 &= 0x000000ff000000ffull;
    s1 &= 0x000000ff000000ffull;
    r2 <<= 8;
    r3 <<= 8;
    s2 <<= 8;
    s3 <<= 8;
    r0 |= r2;
    r1 |= r3;
    s0 |= s2;
    s1 |= s3;

    r2 = r0 & 0x000000000000ffffull;
    r3 = r1 & 0x000000000000ffffull;
    s2 = s0 & 0x000000000000ffffull;
    s3 = s1 & 0x000000000000ffffull;
    r0 >>= 32;
    r1 >>= 32;
    s0 >>= 32;
    s1 >>= 32;
    r0 &= 0x000000000000ffffull;
    r1 &= 0x000000000000ffffull;
    s0 &= 0x000000000000ffffull;
    s1 &= 0x000000000000ffffull;
    r2 <<= 16;
    r3 <<= 16;
    s2 <<= 16;
    s3 <<= 16;
    r0 |= r2;
    r1 |= r3;
    s0 |= s2;
    s1 |= s3;

    r0 <<= 32;
    s0 <<= 32;
    r0 |= r1;
    s0 |= s1;

    hex[0] = r0;
    hex[1] = s0;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
