/* TextDigitReader.h - .txt Reader Object
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 07/13/2013
 * Last Modified    : 07/28/2013
 * 
 */

#pragma once
#ifndef ydv_DigitViewer_TextDigitReader_H
#define ydv_DigitViewer_TextDigitReader_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/SystemLibs/FileIO/BasicFile.h"
#include "DigitReader.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace DigitViewer{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class TextReader : public DigitReader{
public:
    //  Open a new reader. You must pass it full path of the .txt file.
    //  For ASCII char output, use:   raw = false
    //  For raw integer output, use:  raw = true
    TextReader(
        const std::string& path,    //  UTF-8
        bool raw = false,
        int radix = 0
    );
    virtual const char* get_extension() const{
        return "txt";
    }

    //  Refer to the abstract class for documentation of these virtual functions.
    virtual void        print           () const;
    virtual int         get_radix       () const;
    virtual uiL_t       get_digits      () const;
    virtual void        set_raw         (bool raw);
    virtual bool        check_range     (uiL_t start, uiL_t end);
    virtual std::string get_first_digits(upL_t L);
    virtual void        read            (uiL_t pos, char* str, upL_t digits);

    void                set_radix       (int radix);

private:
    FileIO::BasicFile m_file;           //  File handle
    int m_radix;                        //  Radix of the digits. (10 or 16)

    bool (*fp_convert)(char*, upL_t);   //  Function pointer for digit conversion.
    ufL_t m_dp_offset;                  //  Offset in the file of the first digit after the decimal place.
    ufL_t m_total_digits;               //  Digits after the decimal place.

    void auto_detect_radix  ();
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
