/* ArithmeticException.cpp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/ConsoleIO/BasicIO.h"
#include "PublicLibs/ConsoleIO/Label.h"
#include "PublicLibs/ExportSafeLibs/Stream.h"
#include "ArithmeticException.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const char ArithmeticException::TYPENAME[] = "ArithmeticException";
ExceptionFactoryT<ArithmeticException> ArithmeticException_Instance;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const char ExponentOverflowException::TYPENAME[] = "ExponentOverflowException";
ExceptionFactoryT<ExponentOverflowException> ExponentOverflowException_Instance;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
ExponentOverflowException::ExponentOverflowException(const char* function, siL_t value, siL_t limit)
    : ArithmeticException(function, "")
    , m_value(value)
    , m_limit(limit)
{}
void ExponentOverflowException::print() const{
    Console::println("\n", 'R');
    Console::println_labelc("Exception Encountered", get_typename());
    Console::println();
    Console::println("Floating-point exponent has exceeded internal limit:");
    Console::println_labelm         ("    Function: ", m_function);
    Console::println_labelm_commas  ("    Value: ", m_value);
    Console::println_labelm_commas  ("    Limit: ", m_limit);
    Console::println("\n");
    Console::SetColor('w');
}
ExponentOverflowException::ExponentOverflowException(const DllSafeStream& data){
    const char* str = (const char*)data.get() + sizeof(TYPENAME);

    m_function = str;
    str += m_function.size() + 1;

    memcpy(&m_value, str, sizeof(m_value));
    str += sizeof(m_value);

    memcpy(&m_limit, str, sizeof(m_limit));
}
DllSafeStream ExponentOverflowException::serialize() const{
    upL_t func_length = m_function.size() + 1;
    upL_t bytes = func_length + sizeof(m_value) + sizeof(m_limit);

    DllSafeStream ptr(sizeof(TYPENAME) + bytes);
    char* str = (char*)ptr.get();
    memcpy(str, TYPENAME, sizeof(TYPENAME));
    str += sizeof(TYPENAME);

    memcpy(str, m_function.c_str(), func_length);
    str += func_length;

    memcpy(str, &m_value, sizeof(m_value));
    str += sizeof(m_value);

    memcpy(str, &m_limit, sizeof(m_limit));

    return ptr;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
[[noreturn]] YM_NO_INLINE void throw_ExponentOverflowException(const char* function, siL_t value, siL_t limit){
    throw ExponentOverflowException(function, value, limit);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
