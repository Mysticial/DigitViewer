/* StringException.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/ConsoleIO/BasicIO.h"
#include "PublicLibs/ConsoleIO/Label.h"
#include "PublicLibs/ExportSafeLibs/Stream.h"
#include "StringException.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const char StringException::TYPENAME[] = "StringException";
ExceptionFactoryT<StringException> StringException_Instance;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_NO_INLINE StringException::StringException(){}
YM_NO_INLINE StringException::StringException(const char* message)
    : m_function("")
    , m_message(message)
{}
YM_NO_INLINE StringException::StringException(std::string message)
    : m_function("")
    , m_message(std::move(message))
{}
YM_NO_INLINE StringException::StringException(const char* function, const char* message)
    : m_function(function)
    , m_message(message)
{}
YM_NO_INLINE StringException::StringException(const char* function, std::string message)
    : m_function(function)
    , m_message(std::move(message))
{}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void StringException::print() const{
    Console::println("\n", 'R');
    Console::println_labelc("Exception Encountered", get_typename());
    Console::println();
    if (!m_function.empty()){
        Console::println_labelc("In Function", m_function);
        Console::println();
    }
    Console::println(m_message);
    Console::println("\n");
    Console::SetColor('w');
}
StringException::StringException(const DllSafeStream& data){
    const char* str = (const char*)data.get() + sizeof(TYPENAME);

    m_function = str;
    str += m_function.size() + 1;

    m_message = str;
}
DllSafeStream StringException::serialize() const{
    upL_t function_size = m_function.size() + 1;
    upL_t message_size = m_message.size() + 1;

    DllSafeStream ptr(sizeof(TYPENAME) + function_size + message_size);
    char* str = (char*)ptr.get();
    memcpy(str, TYPENAME, sizeof(TYPENAME));
    str += sizeof(TYPENAME);

    memcpy(str, &m_function.front(), function_size);
    str += function_size;

    memcpy(str, &m_message.front(), message_size);

    return ptr;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
