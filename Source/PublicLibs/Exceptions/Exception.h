/* Exception.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

#pragma once
#ifndef ymp_Exceptions_Exception_H
#define ymp_Exceptions_Exception_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
namespace ymp{
    class DllSafeStream;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class Exception{
public:
    virtual ~Exception() = default;
    [[noreturn]] virtual void fire() const = 0;
    virtual const char* get_typename() const = 0;
    virtual Exception* clone() const = 0;   //  Must be manually freed.
    virtual void print() const = 0;
    virtual DllSafeStream serialize() const = 0;

    static Exception* deserialize(const DllSafeStream& data);    //  Must be manually freed.
    static void rethrow(const DllSafeStream& data);
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Boundary Crossing
class ExceptionFactory{
public:
    //  Must be manually freed.
    virtual Exception* deserialize(const DllSafeStream& data) const = 0;
};
////////////////////////////////////////////////////////////////////////////////
void register_exception(const char* name, ExceptionFactory* factory);
////////////////////////////////////////////////////////////////////////////////
template <typename ExceptionType>
class ExceptionFactoryT : public ExceptionFactory{
public:
    ExceptionFactoryT(){
        register_exception(ExceptionType::TYPENAME, this);
    }
    virtual Exception* deserialize(const DllSafeStream& data) const override{
        return new ExceptionType(data);
    }
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
