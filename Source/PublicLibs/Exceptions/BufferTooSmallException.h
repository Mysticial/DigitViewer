/* BufferTooSmallException.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

#pragma once
#ifndef ymp_Exceptions_BufferTooSmallException_H
#define ymp_Exceptions_BufferTooSmallException_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <string>
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
#include "Exception.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class BufferTooSmallException : public Exception{
public:
    static const char TYPENAME[];

    YM_NO_INLINE BufferTooSmallException(const char* function, uiL_t buffer_size, uiL_t required_size);

public:
    [[noreturn]] virtual void fire() const override{
        throw *this;
    }
    virtual const char* get_typename() const override{
        return TYPENAME;
    }
    virtual Exception* clone() const override{
        return new BufferTooSmallException(*this);
    }
    virtual void print() const override;

public:
    BufferTooSmallException(const DllSafeStream& data);
    virtual DllSafeStream serialize() const override;

private:
    std::string m_function;
    uiL_t m_buffer_size;
    siL_t m_required_size;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
