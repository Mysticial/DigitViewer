/* BufferTooSmallException.cpp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/ConsoleIO/BasicIO.h"
#include "PublicLibs/ConsoleIO/Label.h"
#include "PublicLibs/ExportSafeLibs/Stream.h"
#include "BufferTooSmallException.h"
#include "BufferTooSmallThrower.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const char BufferTooSmallException::TYPENAME[] = "BufferTooSmallException";
ExceptionFactoryT<BufferTooSmallException> BufferTooSmallException_Instance;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_NO_INLINE BufferTooSmallException::BufferTooSmallException(const char* function, siL_t buffer_size, uiL_t required_size)
    : m_function(function)
    , m_buffer_size(buffer_size)
    , m_required_size(required_size)
{}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void BufferTooSmallException::print() const{
    Console::println("\n", 'R');
    Console::println_labelc("Exception Encountered", get_typename());
    Console::println();
    Console::println("Buffer is too small:");
    Console::println_labelm         ("    Function: ", m_function);
    Console::println_labelm_commas  ("    Buffer Size: ", m_buffer_size);
    Console::println_labelm_commas  ("    Required Size: ", m_required_size);
    Console::println("\n");
    Console::SetColor('w');
}
BufferTooSmallException::BufferTooSmallException(const DllSafeStream& data){
    const char* str = (const char*)data.get() + sizeof(TYPENAME);

    m_function = str;
    str += m_function.size() + 1;

    memcpy(&m_buffer_size, str, sizeof(m_buffer_size));
    str += sizeof(m_buffer_size);

    memcpy(&m_required_size, str, sizeof(m_required_size));
}
DllSafeStream BufferTooSmallException::serialize() const{
    upL_t func_length = m_function.size() + 1;
    upL_t bytes = func_length + sizeof(m_buffer_size) + sizeof(m_required_size);

    DllSafeStream ptr(sizeof(TYPENAME) + bytes);
    char* str = (char*)ptr.get();
    memcpy(str, TYPENAME, sizeof(TYPENAME));
    str += sizeof(TYPENAME);

    memcpy(str, m_function.c_str(), func_length);
    str += func_length;

    memcpy(str, &m_buffer_size, sizeof(m_buffer_size));
    str += sizeof(m_buffer_size);

    memcpy(str, &m_required_size, sizeof(m_required_size));

    return ptr;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
[[noreturn]] YM_NO_INLINE
void throw_BufferTooSmallException(const char* function, siL_t buffer_size, uiL_t required_size){
#ifdef YMP_BUILD_DEVELOPER
    BufferTooSmallException e(function, buffer_size, required_size);
    e.print();
    throw e;
#else
    throw BufferTooSmallException(function, buffer_size, required_size);
#endif
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
