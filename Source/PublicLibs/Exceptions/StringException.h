/* StringException.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

#pragma once
#ifndef ymp_Exceptions_StringException_H
#define ymp_Exceptions_StringException_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <string>
#include "PublicLibs/CompilerSettings.h"
#include "Exception.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class StringException : public Exception{
public:
    static const char TYPENAME[];

    YM_NO_INLINE StringException();
    YM_NO_INLINE StringException(const char* message);
    YM_NO_INLINE StringException(std::string message);
    YM_NO_INLINE StringException(const char* function, const char* message);
    YM_NO_INLINE StringException(const char* function, std::string message);

public:
    [[noreturn]] virtual void fire() const override{
        throw *this;
    }
    virtual const char* get_typename() const override{
        return TYPENAME;
    }
    virtual Exception* clone() const override{
        return new StringException(*this);
    }
    virtual void print() const override;

    const std::string& message() const{
        return m_message;
    }

public:
    StringException(const DllSafeStream& data);
    virtual DllSafeStream serialize() const override;

protected:
    std::string m_function;
    std::string m_message;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
