/* Exception.cpp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 04/09/2017
 * Last Modified    : 04/09/2017
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <memory>
#include <string>
#include <map>
#include "PublicLibs/ConsoleIO/BasicIO.h"
#include "PublicLibs/ConsoleIO/Label.h"
#include "PublicLibs/ExportSafeLibs/Stream.h"
#include "Exception.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class UnknownException : public Exception{
public:
    [[noreturn]] virtual void fire() const override{
        throw *this;
    }
    virtual const char* get_typename() const{
        return (const char*)m_data.get();
    }
    virtual Exception* clone() const override{
        return new UnknownException(*this);
    }
    virtual void print() const{
        Console::println("\n", 'R');
        Console::println_labelc("Exception Encountered", get_typename());
        Console::println("\nException type unknown to this module. Unable to display.\n");
        Console::SetColor('w');
    }

public:
    UnknownException(const DllSafeStream& data)
        : m_data(data)
    {}
    virtual DllSafeStream serialize() const{
        return m_data;
    }

private:
    DllSafeStream m_data;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
std::map<std::string, ExceptionFactory*>& exception_map(){
    static std::map<std::string, ExceptionFactory*> map;
    return map;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void register_exception(const char* name, ExceptionFactory* factory){
    std::string str = name;
    std::map<std::string, ExceptionFactory*>& map = exception_map();
    auto iter = map.find(str);
    if (iter != map.end()){
        Console::Warning("Duplicate Exception Type");
        Console::Quit(1);
    }
    map[str] = factory;
}
Exception* Exception::deserialize(const DllSafeStream& data){
    std::string name = (const char*)data.get();
    std::map<std::string, ExceptionFactory*>& map = exception_map();
    auto iter = map.find(name);
    if (iter != map.end()){
        return iter->second->deserialize(std::move(data));
    }
    return new UnknownException(std::move(data));
}
void Exception::rethrow(const DllSafeStream& data){
    std::unique_ptr<Exception> e(deserialize(std::move(data)));
    e->fire();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
