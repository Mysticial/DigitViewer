/* SmartPointer.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/06/2016
 * Last Modified    : 09/23/2016
 * 
 */

#pragma once
#ifndef ymp_Memory_SmartPointer_H
#define ymp_Memory_SmartPointer_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <memory>
#include "AlignedMalloc.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename T>
struct AlignedObjectDeleter{
    void operator()(T* ptr) const{
        ptr->~T();
        AlignedFree(ptr);
    }
};
template <typename T>
using AlignedPointer = std::unique_ptr<T, AlignedObjectDeleter<T>>;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Normal Object
template <typename T, upL_t alignment = alignof(T), class... Args>
AlignedPointer<T> make_object(Args&&... args){
    T* ptr = (T*)AlignedMalloc(sizeof(T), alignment);
    ::new (ptr) T(std::forward<Args>(args)...);
    return AlignedPointer<T>(ptr);
}
////////////////////////////////////////////////////////////////////////////////
//  Object with user-specified size.
template <typename T, upL_t alignment = alignof(T), class... Args>
AlignedPointer<T> make_extended_object(upL_t bytes, Args&&... args){
    T* ptr = (T*)AlignedMalloc(bytes, alignment);
    ::new (ptr) T(std::forward<Args>(args)...);
    return AlignedPointer<T>(ptr);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
